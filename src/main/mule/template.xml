<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.mulesoft.org/schema/mule/core"
  xmlns:http-policy="http://www.mulesoft.org/schema/mule/http-policy"
  xmlns:federation="http://www.mulesoft.org/schema/mule/federation"
  xmlns:http-transform="http://www.mulesoft.org/schema/mule/http-policy-transform"
  xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
               http://www.mulesoft.org/schema/mule/http-policy http://www.mulesoft.org/schema/mule/http-policy/current/mule-http-policy.xsd
               http://www.mulesoft.org/schema/mule/http-policy-transform http://www.mulesoft.org/schema/mule/http-policy-transform/current/mule-http-policy-transform.xsd
               http://www.mulesoft.org/schema/mule/federation http://www.mulesoft.org/schema/mule/federation/current/mule-federation.xsd">

  {{#if scopes}}
  <federation:open-id-config tokenUrl="{{introspectionEndpoint}}"
    clientId="{{introspectionClientId}}" clientSecret="{{introspectionClientSecret}}"
    scopes="{{scopes}}" name="config" />
  {{else}}
  <federation:open-id-config tokenUrl="{{introspectionEndpoint}}"
    clientId="{{introspectionClientId}}" clientSecret="{{introspectionClientSecret}}"
    name="config" />
  {{/if}}

  <http-policy:proxy name="{{{policyId}}}-custom-policy">
    <http-policy:source>
      <try>
        <choice>
          <when expression="#[attributes.headers['Authorization'] startsWith 'Bearer ']">
            <federation:authenticate-open-id
              accessToken="#[attributes.queryParams['access_token']]"
              authorization="#[attributes.headers['authorization']]"
              config-ref="config" />
            <set-variable variableName="federationProperties"
              value="#[authentication.properties.userProperties]" />
          </when>
          <otherwise>
            <raise-error type="REQUEST:INVALIDHEADER" />
          </otherwise>
        </choice>
        <http-policy:execute-next />
        <error-handler>
           <on-error-continue type="REQUEST:INVALIDHEADER, FEDERATION:INVALID_TOKEN" logException="false">
            <http-transform:set-response statusCode="400">
              <http-transform:body>#[
                output application/json --- {"error":
                "$(error.description)"}
                ]
              </http-transform:body>
            </http-transform:set-response>
          </on-error-continue>
          <on-error-continue type="FEDERATION:NOT_AUTHORIZED, FEDERATION:CONNECTION_ERROR" logException="false">
            <http-transform:set-response statusCode="401">
              <http-transform:body>#[
                output application/json --- {"error":
                "$(error.description)"}
                ]
              </http-transform:body>
            </http-transform:set-response>
          </on-error-continue>
          <on-error-continue type="FEDERATION:FORBIDDEN_ERROR" logException="false">
            <http-transform:set-response statusCode="403">
              <http-transform:body>#[
                output application/json --- {"error":
                "$(error.description)"}
                ]
              </http-transform:body>
            </http-transform:set-response>
          </on-error-continue>
          <on-error-continue type="FEDERATION:BAD_RESPONSE_ERROR" logException="false">
            <http-transform:set-response statusCode="500">
              <http-transform:body>#[
                output application/json --- {"error":
                "$(error.description)"}
                ]
              </http-transform:body>
            </http-transform:set-response>
          </on-error-continue>
        </error-handler>
      </try>
    </http-policy:source>
  </http-policy:proxy>
</mule>